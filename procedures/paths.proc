# Some common operation with paths. It is inspired in os.path package from python
#
# Written by Rolando Munoz A. (23 Feb 2020)
# Version: 1.1.0
# This script is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# A copy of the GNU General Public License is available at
# <http://www.gnu.org/licenses/>.

#! ~~~params
#! selection:
#!   in:
#!     - objectName$: name of resulting Strings object
#!     - filePath$: directory path where files are stored. It admits wildcard * at the end.
#!     - recursive_search: 1 for searching in all subdirectories of the filePath; 0 for searching at the path level.
#!   out:
#!     - strings: 1
#! ~~~
#! Emulate Create Strings as file list command with recursive search option
#!
procedure createStringAsFileList: .objectName$, .filePath$, .recursive_search
  # Normalize filePath
  ## Possible entries:
  ## /home/rolando/Desktop/A/*.txt
  ## /home/rolando/Desktop/A/*
  ## /home/rolando/Desktop/A/
  ## /home/rolando/Desktop/A
  ## C:\users\rolando\casa

  if .recursive_search
    # Normalize file path
    .filePath$= replace$(.filePath$, "\", "/", 0)
    if not index(.filePath$, "*")
      .sep$= if endsWith(.filePath$, "/") then "" else "/" fi
      .filePath$= .filePath$ + .sep$ + "*"
    endif
    
    # Get path and file name
    .filePattern$ = replace_regex$(.filePath$, "(.*/)(.*)", "\2", 1)
    .directoryPath$ = replace_regex$(.filePath$, "(.*/)(.*)", "\1", 1)

    @_findFiles: .directoryPath$, .filePattern$, .recursive_search
    .tb_fileList= selected("Table")
    Formula: "path", ~replace$(self$["path"], .directoryPath$ + "/","",1)
    if windows
      Formula: "path", ~replace$(self$["path"], "/","\",0)
    endif
    @_tb2Strings: "path"
    .return = selected("Strings")
    Rename: .objectName$
    #removeObject: .tb_fileList
  else
    .return = Create Strings as file list: .objectName$, .filePath$
  endif
endproc

#! ~~~params
#! selection:
#!   in:
#!     - objectName$: The name of the returning Strings object
#!     - path$: root path directory$
#!     - recursive_search: 1 if recursive search, else 0
#!   out:
#!     - strings: 1
#! ~~~
#! Emulate Create Strings as directory list command with recursive search option
#!
procedure createStringsAsDirectoryList: .objectName$, .path$, .recursive_search
  if .recursive_search
    @_findDirectories: .path$
    .tb= selected("Table")
    Formula: "path", ~replace$(self$["path"], .path$ + "/","",1)
    if windows
      Formula: "path", ~replace$(self$["path"], "/","\",0)
    endif
    Remove row: 1; the first element does not count beacause it is the root path
    @_tb2Strings: "path"
    Rename: .objectName$
    removeObject: .tb
  else
    Create Strings as directory list: .objectName$, .path$
  endif
endproc

#! ~~~params
#! selection:
#!   in:
#!     - rootDirectory$: the root directory
#!   out:
#!     - table: 1
#! ~~~
#! Search for folders in a directory hierarchy. It uses the Depth-first Search algorithm
#!
procedure _findDirectories: .rootDirectory$
  # Create a table
  .return = Create Table with column names: "directoryList", 0, "id parent_id i_dir n_dir path"
  @_findDirectoriesCall: .return, 0, .rootDirectory$
  selectObject: .return
endproc

#! ~~~params
#! selection:
#!   in:
#!     - tb_directoryList: a Table object where directories are stored
#!     - parentId: a Strings object which contains a directory List
#!     - directory$: a directory path
#! ~~~
#! Internal procedure. This procedure complete the Table tb_directoryList 
#! with all directory paths below a root. It is based on Post Order Traversal algorithm.
#!
procedure _findDirectoriesCall: .tb_directoryList, .parentId, .directory$
   .str_directoryList = Create Strings as directory list: "directoryList", .directory$
  .nDirectories = Get number of strings

  selectObject: .tb_directoryList
  Append row
  Set numeric value: object[.tb_directoryList].nrow, "id", .str_directoryList
  Set numeric value: object[.tb_directoryList].nrow, "parent_id", .parentId
  Set numeric value: object[.tb_directoryList].nrow, "i_dir", 1
  Set numeric value: object[.tb_directoryList].nrow, "n_dir", .nDirectories
  Set string value: object[.tb_directoryList].nrow, "path", .directory$

  selectObject: .str_directoryList
  for .i to .nDirectories
    .folderName$= object$[.str_directoryList, .i]
    @_findDirectoriesCall: .tb_directoryList, .str_directoryList, .directory$ + "/" + .folderName$
  endfor
  removeObject: .str_directoryList

  # Parent id
  ## Get parent id
  selectObject: .tb_directoryList
  .tb_row = Search column: "id", string$(.str_directoryList)
  .str_directoryList = object[.tb_directoryList, .tb_row, "parent_id"]

  if .str_directoryList
  ## Increase counter 'i' of the parent id
    .tb_row = Search column: "id", string$(.str_directoryList)
    .i = object[.tb_directoryList, .tb_row, "i_dir"]
    Set numeric value: .tb_row, "i_dir", .i+1
    .nDirectories = object[.tb_directoryList, .tb_row, "n_dir"]
    .directory$ = object$[.tb_directoryList, .tb_row, "path"]
  endif
endproc

#! ~~~params
#! selection:
#!   in:
#!     - path$: the root file
#!     - filePattern$: the name pattern of the files
#!   out:
#!     - strings: 1
#! ~~~
#! Search for files in a directory hierarchy. It uses the Depth-first Search algorithm
#!
procedure _findFiles: .path$, .filePattern$
  .tb_return= Create Table with column names: "fileList", 0, "path"
  @_findDirectories: .path$
  .tb_directoryList= selected("Table")
  for .i to object[.tb_directoryList].nrow
    .filePath$= object$[.tb_directoryList, .i, "path"]
    .str_fileList= Create Strings as file list: "fileList", .filePath$ + "/" + .filePattern$
    .nFiles= Get number of strings
    for .j to .nFiles
      .filename$= object$[.str_fileList, .j]
      .fileFullPath$= .filePath$ + "/" + .filename$
      selectObject: .tb_return
      Append row
      Set string value: object[.tb_return].nrow, "path", .fileFullPath$
    endfor
    removeObject: .str_fileList
  endfor
  removeObject: .tb_directoryList
  selectObject: .tb_return
endproc

#! ~~~params
#! selection:
#! - Table
#!   in:
#!     - columnName$: name of the column table
#! ~~~
#! Convert one table column to a Strings object
#!
procedure _tb2Strings: .columnName$
  .tb= selected("Table")
  .str_return = Create Strings as tokens: "", " ,"
  for .i to object[.tb].nrow
    path$= object$[.tb, .i, .columnName$]
    Insert string: 0, path$
  endfor
endproc

#! ~~~ params
#!  in:
#!    .path$ (string$): the name of folder directory which you want to create.
#!  folder_directory:
#!    out:
#!      a set of folders created recursively.
#! ~~~
#!
#! Given a path, create a directory recursively.
#!
procedure make_dirs: .path$
  @iterate_path: .path$
  for .i to size(iterate_path.return$#)
    .path$= iterate_path.return$#[.i]
    createFolder(.path$)
  endfor
endproc

#! ~~~ params
#! in:
#!   .path$ (string$): the name of a file or directory.
#! out:
#!   .return$# (vector$#): a list of all paths from source to target.
#! ~~~
#!
#! It returns a vector variable where each item contains the components path from source to target. For example, the procedure @iterate_path: "/home/rolando/Documents/data" returns {"/home", "/home/rolando", "/home/rolando/Documents", "/home/rolando/Documents/data"}
#!
procedure iterate_path: .path$
  .objects# = selected#()
  @unixpath: .path$
  .str = Create Strings from tokens: "dirnames", unixpath.return$, "/"
  .nstrings = Get number of strings
  .dirnames$# = empty$#(.nstrings)
  for .i to .nstrings
    .name$ = object$[.str, .i]
    if .i == 1
      if startsWith(.path$, "/")
       .name$ = "/" + .name$
      endif
      .dirnames$#[.i] = .name$
    else
      .dirnames$#[.i] = .dirnames$#[.i-1] + "/" + .name$
    endif
  endfor
  removeObject: .str
  selectObject: .objects#
  .return$# = .dirnames$#
endproc

procedure basename_without_extension: .path$
  @basename: .path$
  @splitext_path: basename.return$
  .return$ = splitext_path.return$#[1]
endproc

procedure swap_extension: .path$, .new_extension$
  @splitext_path: .path$
  .root$ = splitext_path.return$#[1]
  .return$ = .root$ + "." + .new_extension$
endproc

#! ~~~ params
#! in:
#!   .path$ (string): the pathname of a file.
#!   .target_extension$ (string): the new extension of the file.
#!   .target_dirname$ (string): the new directory of the folder's file.
#!   .rel_dirname (integer): 1 if the new folder directory is relative to the fpath. 0 if the new folder directory is an absolute path.
#! out:
#!   .return$ (string): a new path
#! ~~~
#!
#!  Modify a pathname of a file. Change the extension and folder directory.
#!
procedure get_pair_path: .path$, .target_extension$, .target_dirname$, .rel_dirname
  @basename: .path$
  @swap_extension: basename.return$, .target_extension$
  .target_basename$ = swap_extension.return$    
  
  if .rel_dirname
    @dirname: .path$
    .dirname$ = dirname.return$
    @join_many_paths: {.dirname$, .target_dirname$, .target_basename$}
  else
    # Relative to the audio directory
    @join_many_paths: {.target_dirname$, .target_basename$}
  endif
  .return$ = join_many_paths.return$
endproc

#! ~~~ params
#! in:
#!   .path$ (string): the path name of a file.
#! out:
#!   .return$ (string): the directory name of a pathname path.
#! ~~~
#!
#!  Returns the directory name of a pathname path. The first element of the pair returned by passing path to the procedure @split_path
#!
procedure dirname: .path$
  @split_path: .path$
  .return$ = split_path.return$#[1]
endproc

#! ~~~ params
#! in:
#!   .path$ (string): the path name of a file.
#! out:
#!   .return$ (string): the base name of a pathname path.
#! ~~~
#!
#!  Returns the base name of a pathname path. The second element of the pair returned by passing path to the procedure @split_path
#!
procedure basename: .path$
  @split_path: .path$
  .return$ = split_path.return$#[2]
endproc

#! ~~~ params
#! in:
#!   .path$ (string): the name of a file or folder directory.
#! out:
#!   .return$# (string vector): a list containing the root and extension of a path.
#! ~~~
#!
#!  Split the pathname path into a pair (root, ext) such that root + ext == path, and ext is empty or begins with a period and contains at most one period. Leading periods on the basename are ignored.
#!
procedure splitext_path: .path$
  @unixpath: .path$
  @basename: unixpath.return$
  if index(basename.return$, ".")
    .ext$ = replace_regex$(basename.return$, "(.+)(\..+)", "\2", 0)
    .root$ = unixpath.return$ - .ext$
    if endsWith(.root$, "/")
      .ext$ = ""
      .root$ = unixpath.return$
    endif
  else
    .ext$ = ""
    .root$ = unixpath.return$
  endif
  .return$# = {.root$, .ext$}
endproc

#! ~~~ params
#! in:
#!   .path1$ (string): first path component (eg. /home/user).
#!   .path2$ (string): second path component (eg. Desktop/data).
#! out:
#!   .return$ (string): a new path.
#! ~~~
#!
#! Join many components as a path.
#!
procedure join_paths: .path1$, .path2$
  .new_path$ = .path1$ + "/" + .path2$
  @unixpath: .new_path$
  .return$ = unixpath.return$
endproc

#! ~~~ params
#! in:
#!   .path$ (string vector): a list of path components to join.
#! out:
#!   .return$# (string): a path with all components joined.
#! ~~~
#!
#! Join many components as a path.
#!
procedure join_many_paths: .paths$#
  .new_path$ = ""
  for .i to size(.paths$#)
    .path$ = .paths$#[.i]
    .new_path$+= .path$ + "/"
  endfor
  .new_path$ = .new_path$ - "/"
  @unixpath: .new_path$
  .return$ = unixpath.return$
endproc

#! ~~~ params
#! in:
#!   .path$ (string$): the name of a file or folder directory.
#! out:
#!   .return$# (string vector): a list containing the head and tail of a path. The tail is the last pathname component and head is everything leading up to that. The tail part will never contain a slash; if path ends in a slash, tail will be empty.
#! ~~~
#!
#! Split the pathname path into a pair (head, tail). The tail is the last pathname component and head is everything leading up to that. The tail part will never contain a slash; if path ends in a slash, tail will be empty.
#!
procedure split_path: .path$

  @unixpath: .path$
  .normpath$ = unixpath.return$

  if endsWith(.normpath$, "/")
    .head$ = replace_regex$(.normpath$, "(.*)/", "\1", 0)
    .return$# = {.head$, ""}
  else
    .head$ = replace_regex$(.normpath$, "(.*)/(.+)", "\1", 0)
    .tail$ = replace_regex$(.normpath$, "(.*)/(.+)", "\2", 0)
    .return$# = {.head$, .tail$ }
  endif
endproc

#!  ~~~ params
#!  in:
#!    .path$ (string): the name of a file or folder directory.
#!  out:
#!    .return$ (string): a path with only forward slashes. If any backslash, it is automatically replaced with a forward slash.
#! ~~~
#!
#! Replace backslashes with forward slashes. Additionally, it removes double slashes.
#!
procedure unixpath: .path$
  .temp_path$ = replace$(.path$, "\", "/", 0)
  .return$ = replace_regex$(.temp_path$, "/+", "/", 0)
endproc

#!  ~~~ params
#!  in:
#!    .path$ (string): the name of a file or folder directory.
#!  out:
#!    .return$ (string): only backslashes (on Windows) or forward slashes (on UNIX based systems). Path slashes are replaced depending on the operating systems.
#! ~~~
#!
#! Depending on the operating system, it returns all slashes from a path as forward slashes (on UNIX based syistems) or backward (on Windows).
#!
procedure normpath: .path$
  if windows
    .return$ = replace$(.path$, "/", "\", 0)
  else
    .return$ = replace$(.path$, "\", "/", 0)
  endif
endproc
