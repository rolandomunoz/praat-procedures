# Some common operation with paths. It is inspired in os.path package from python
#
# Written by Rolando Munoz A. (23 Feb 2020)
# Version: 1.0
# This script is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# A copy of the GNU General Public License is available at
# <http://www.gnu.org/licenses/>.

procedure walk: .path$
  @unixpath: .path$
  path$ = unixpath.return$
  folderNames$# = folderNames$#(.path$)
  n_folders = size(folderNames$#)
  while n_folders
      appendInfoLine: folderNames$#
  endwhile
endproc

procedure iterate_folders

endproc

#! ~~~ params
#!  in:
#!    .path$ (string$): the name of folder directory which you want to create.
#!  folder_directory:
#!    out:
#!      a set of folders created recursively.
#! ~~~
#!
#! Given a path, create a directory recursively.
#!
procedure make_dirs: .path$
  @iterate_path: .path$
  for .i to size(iterate_path.return$#)
    .path$= iterate_path.return$#[.i]
    createFolder(.path$)
  endfor
endproc

#! ~~~ params
#! in:
#!   .path$ (string$): the name of a file or directory.
#! out:
#!   .return$# (vector$#): a list of all paths from source to target.
#! ~~~
#!
#! It returns a vector variable where each item contains the components path from source to target. For example, the procedure @iterate_path: "/home/rolando/Documents/data" returns {"/home", "/home/rolando", "/home/rolando/Documents", "/home/rolando/Documents/data"}
#!
procedure iterate_path: .path$
  .objects# = selected#()
  @unixpath: .path$
  .str = Create Strings from tokens: "dirnames", unixpath.return$, "/"
  .nstrings = Get number of strings
  .dirnames$# = empty$#(.nstrings)
  for .i to .nstrings
    .name$ = object$[.str, .i]
    if .i == 1
      if startsWith(.path$, "/")
       .name$ = "/" + .name$
      endif
      .dirnames$#[.i] = .name$
    else
      .dirnames$#[.i] = .dirnames$#[.i-1] + "/" + .name$
    endif
  endfor
  removeObject: .str
  selectObject: .objects#
  .return$# = .dirnames$#
endproc

procedure basename_without_extension: .path$
  @basename: .path$
  @splitext_path: basename.return$
  .return$ = splitext_path.return$#[1]
endproc

procedure swap_extension: .path$, .new_extension$
  @splitext_path: .path$
  .root$ = splitext_path.return$#[1]
  .return$ = .root$ + "." + .new_extension$
endproc

procedure get_pair_path: .path$, .target_extension$, .target_dirname$, .rel_dirname
  @basename: .path$
  @swap_extension: basename.return$, .target_extension$
  .target_basename$ = swap_extension.return$    
  
  if .rel_dirname
    @dirname: .path$
    .dirname$ = dirname.return$
    @join_many_paths: {.dirname$, .target_dirname$, .target_basename$}
  else
    # Relative to the audio directory
    @join_many_paths: {.target_dirname$, .target_basename$}
  endif
  .return$ = join_many_paths.return$
endproc

procedure dirname: .path$
  @split_path: .path$
  .return$ = split_path.return$#[1]
endproc

procedure basename: .path$
  @split_path: .path$
  .return$ = split_path.return$#[2]
endproc

#! ~~~ params
#! in:
#!   .path$ (string$): the name of a file or folder directory.
#! out:
#!   .return$# (string vector): a list containing the root and extension of a path.
#! ~~~
#!
#!  Split the pathname path into a pair (root, ext) such that root + ext == path, and ext is empty or begins with a period and contains at most one period. Leading periods on the basename are ignored.
#!
procedure splitext_path: .path$
  @unixpath: .path$
  @basename: unixpath.return$
  if index(basename.return$, ".")
    .ext$ = replace_regex$(basename.return$, "(.+)(\..+)", "\2", 0)
    .root$ = unixpath.return$ - .ext$
    if endsWith(.root$, "/")
      .ext$ = ""
      .root$ = unixpath.return$
    endif
  else
    .ext$ = ""
    .root$ = unixpath.return$
  endif
  .return$# = {.root$, .ext$}
endproc

#! ~~~ params
#! in:
#!   .path1$ (string): first path component (eg. /home/user).
#!   .path2$ (string): second path component (eg. Desktop/data).
#! out:
#!   .return$ (string): a new path.
#! ~~~
#!
#! Join many components as a path.
#!
procedure join_paths: .path1$, .path2$
  .new_path$ = .path1$ + "/" + .path2$
  @unixpath: .new_path$
  .return$ = unixpath.return$
endproc

#! ~~~ params
#! in:
#!   .path$ (string vector): a list of path components to join.
#! out:
#!   .return$# (string): a path with all components joined.
#! ~~~
#!
#! Join many components as a path.
#!
procedure join_many_paths: .paths$#
  .new_path$ = ""
  for .i to size(.paths$#)
    .path$ = .paths$#[.i]
    .new_path$+= .path$ + "/"
  endfor
  .new_path$ = .new_path$ - "/"
  @unixpath: .new_path$
  .return$ = unixpath.return$
endproc

#! ~~~ params
#! in:
#!   .path$ (string$): the name of a file or folder directory.
#! out:
#!   .return$# (string vector): a list containing the head and tail of a path. The tail is the last pathname component and head is everything leading up to that. The tail part will never contain a slash; if path ends in a slash, tail will be empty.
#! ~~~
#!
#! Split the pathname path into a pair (head, tail). The tail is the last pathname component and head is everything leading up to that. The tail part will never contain a slash; if path ends in a slash, tail will be empty.
#!
procedure split_path: .path$

  @unixpath: .path$
  .normpath$ = unixpath.return$

  if endsWith(.normpath$, "/")
    .head$ = replace_regex$(.normpath$, "(.*)/", "\1", 0)
    .return$# = {.head$, ""}
  else
    .head$ = replace_regex$(.normpath$, "(.*)/(.+)", "\1", 0)
    .tail$ = replace_regex$(.normpath$, "(.*)/(.+)", "\2", 0)
    .return$# = {.head$, .tail$ }
  endif
endproc

#!  ~~~ params
#!  in:
#!    .path$ (string): the name of a file or folder directory.
#!  out:
#!    .return$ (string): a path with only forward slashes. If any backslash, it is automatically replaced with a forward slash.
#! ~~~
#!
#! Replace backslashes with forward slashes. Additionally, it removes double slashes.
#!
procedure unixpath: .path$
  .temp_path$ = replace$(.path$, "\", "/", 0)
  .return$ = replace_regex$(.temp_path$, "/+", "/", 0)
endproc

#!  ~~~ params
#!  in:
#!    .path$ (string): the name of a file or folder directory.
#!  out:
#!    .return$ (string): only backslashes (on Windows) or forward slashes (on UNIX based systems). Path slashes are replaced depending on the operating systems.
#! ~~~
#!
#! Depending on the operating system, it returns all slashes from a path as forward slashes (on UNIX based syistems) or backward (on Windows).
#!
procedure normpath: .path$
  if windows
    .return$ = replace$(.path$, "/", "\", 0)
  else
    .return$ = replace$(.path$, "\", "/", 0)
  endif
endproc
